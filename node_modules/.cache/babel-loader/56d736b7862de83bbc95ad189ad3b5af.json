{"ast":null,"code":"/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    }\n\n    var React = require('react');\n\n    var shim = require('use-sync-external-store/shim');\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n\n\n    function is(x, y) {\n      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n      ;\n    }\n\n    var objectIs = typeof Object.is === 'function' ? Object.is : is;\n    var useSyncExternalStore = shim.useSyncExternalStore; // for CommonJS interop.\n\n    var useRef = React.useRef,\n        useEffect = React.useEffect,\n        useMemo = React.useMemo,\n        useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\n    function useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n      // Use this to track the rendered snapshot.\n      var instRef = useRef(null);\n      var inst;\n\n      if (instRef.current === null) {\n        inst = {\n          hasValue: false,\n          value: null\n        };\n        instRef.current = inst;\n      } else {\n        inst = instRef.current;\n      }\n\n      var _useMemo = useMemo(function () {\n        // Track the memoized state using closure variables that are local to this\n        // memoized instance of a getSnapshot function. Intentionally not using a\n        // useRef hook, because that state would be shared across all concurrent\n        // copies of the hook/component.\n        var hasMemo = false;\n        var memoizedSnapshot;\n        var memoizedSelection;\n\n        var memoizedSelector = function (nextSnapshot) {\n          if (!hasMemo) {\n            // The first time the hook is called, there is no memoized result.\n            hasMemo = true;\n            memoizedSnapshot = nextSnapshot;\n\n            var _nextSelection = selector(nextSnapshot);\n\n            if (isEqual !== undefined) {\n              // Even if the selector has changed, the currently rendered selection\n              // may be equal to the new selection. We should attempt to reuse the\n              // current value if possible, to preserve downstream memoizations.\n              if (inst.hasValue) {\n                var currentSelection = inst.value;\n\n                if (isEqual(currentSelection, _nextSelection)) {\n                  memoizedSelection = currentSelection;\n                  return currentSelection;\n                }\n              }\n            }\n\n            memoizedSelection = _nextSelection;\n            return _nextSelection;\n          } // We may be able to reuse the previous invocation's result.\n          // We may be able to reuse the previous invocation's result.\n\n\n          var prevSnapshot = memoizedSnapshot;\n          var prevSelection = memoizedSelection;\n\n          if (objectIs(prevSnapshot, nextSnapshot)) {\n            // The snapshot is the same as last time. Reuse the previous selection.\n            return prevSelection;\n          } // The snapshot has changed, so we need to compute a new selection.\n          // The snapshot has changed, so we need to compute a new selection.\n\n\n          var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n          // has changed. If it hasn't, return the previous selection. That signals\n          // to React that the selections are conceptually equal, and we can bail\n          // out of rendering.\n          // If a custom isEqual function is provided, use that to check if the data\n          // has changed. If it hasn't, return the previous selection. That signals\n          // to React that the selections are conceptually equal, and we can bail\n          // out of rendering.\n\n          if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n            return prevSelection;\n          }\n\n          memoizedSnapshot = nextSnapshot;\n          memoizedSelection = nextSelection;\n          return nextSelection;\n        }; // Assigning this to a constant so that Flow knows it can't change.\n        // Assigning this to a constant so that Flow knows it can't change.\n\n\n        var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n\n        var getSnapshotWithSelector = function () {\n          return memoizedSelector(getSnapshot());\n        };\n\n        var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n          return memoizedSelector(maybeGetServerSnapshot());\n        };\n        return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n      }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n          getSelection = _useMemo[0],\n          getServerSelection = _useMemo[1];\n\n      var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n      useEffect(function () {\n        inst.hasValue = true;\n        inst.value = value;\n      }, [value]);\n      useDebugValue(value);\n      return value;\n    }\n\n    exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }\n  })();\n}","map":{"version":3,"sources":["/home/hp/MICROVERSE/React.js/week3/solo-projects/React-Bookstore/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"],"names":["process","env","NODE_ENV","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","Error","React","require","shim","is","x","y","objectIs","Object","useSyncExternalStore","useRef","useEffect","useMemo","useDebugValue","useSyncExternalStoreWithSelector","subscribe","getSnapshot","getServerSnapshot","selector","isEqual","instRef","inst","current","hasValue","value","_useMemo","hasMemo","memoizedSnapshot","memoizedSelection","memoizedSelector","nextSnapshot","_nextSelection","undefined","currentSelection","prevSnapshot","prevSelection","nextSelection","maybeGetServerSnapshot","getSnapshotWithSelector","getServerSnapshotWithSelector","getSelection","getServerSelection","exports","registerInternalModuleStop"],"mappings":"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","sourcesContent":["/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = require('react');\nvar shim = require('use-sync-external-store/shim');\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar useSyncExternalStore = shim.useSyncExternalStore;\n\n// for CommonJS interop.\n\nvar useRef = React.useRef,\n    useEffect = React.useEffect,\n    useMemo = React.useMemo,\n    useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\nfunction useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n  // Use this to track the rendered snapshot.\n  var instRef = useRef(null);\n  var inst;\n\n  if (instRef.current === null) {\n    inst = {\n      hasValue: false,\n      value: null\n    };\n    instRef.current = inst;\n  } else {\n    inst = instRef.current;\n  }\n\n  var _useMemo = useMemo(function () {\n    // Track the memoized state using closure variables that are local to this\n    // memoized instance of a getSnapshot function. Intentionally not using a\n    // useRef hook, because that state would be shared across all concurrent\n    // copies of the hook/component.\n    var hasMemo = false;\n    var memoizedSnapshot;\n    var memoizedSelection;\n\n    var memoizedSelector = function (nextSnapshot) {\n      if (!hasMemo) {\n        // The first time the hook is called, there is no memoized result.\n        hasMemo = true;\n        memoizedSnapshot = nextSnapshot;\n\n        var _nextSelection = selector(nextSnapshot);\n\n        if (isEqual !== undefined) {\n          // Even if the selector has changed, the currently rendered selection\n          // may be equal to the new selection. We should attempt to reuse the\n          // current value if possible, to preserve downstream memoizations.\n          if (inst.hasValue) {\n            var currentSelection = inst.value;\n\n            if (isEqual(currentSelection, _nextSelection)) {\n              memoizedSelection = currentSelection;\n              return currentSelection;\n            }\n          }\n        }\n\n        memoizedSelection = _nextSelection;\n        return _nextSelection;\n      } // We may be able to reuse the previous invocation's result.\n\n\n      // We may be able to reuse the previous invocation's result.\n      var prevSnapshot = memoizedSnapshot;\n      var prevSelection = memoizedSelection;\n\n      if (objectIs(prevSnapshot, nextSnapshot)) {\n        // The snapshot is the same as last time. Reuse the previous selection.\n        return prevSelection;\n      } // The snapshot has changed, so we need to compute a new selection.\n\n\n      // The snapshot has changed, so we need to compute a new selection.\n      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n\n      // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n        return prevSelection;\n      }\n\n      memoizedSnapshot = nextSnapshot;\n      memoizedSelection = nextSelection;\n      return nextSelection;\n    }; // Assigning this to a constant so that Flow knows it can't change.\n\n\n    // Assigning this to a constant so that Flow knows it can't change.\n    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n\n    var getSnapshotWithSelector = function () {\n      return memoizedSelector(getSnapshot());\n    };\n\n    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n      return memoizedSelector(maybeGetServerSnapshot());\n    };\n    return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n  }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n      getSelection = _useMemo[0],\n      getServerSelection = _useMemo[1];\n\n  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n  useEffect(function () {\n    inst.hasValue = true;\n    inst.value = value;\n  }, [value]);\n  useDebugValue(value);\n  return value;\n}\n\nexports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n"]},"metadata":{},"sourceType":"script"}