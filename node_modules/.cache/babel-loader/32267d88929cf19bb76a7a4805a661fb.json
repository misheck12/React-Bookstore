{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"reactReduxForwardedRef\"];\n/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\n\nimport hoistStatics from 'hoist-non-react-statics';\nimport React, { useContext, useMemo, useRef } from 'react';\nimport { isValidElementType, isContextConsumer } from 'react-is';\nimport defaultSelectorFactory from '../connect/selectorFactory';\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps';\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps';\nimport { mergePropsFactory } from '../connect/mergeProps';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport shallowEqual from '../utils/shallowEqual';\nimport { ReactReduxContext } from './Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStore = notInitialized;\nexport const initializeConnect = fn => {\n  useSyncExternalStore = fn;\n}; // Define some constant arrays just to avoid re-creating these\n\nconst EMPTY_ARRAY = [null, 0];\nconst NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\n\nconst stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n}; // This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\n\n\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n} // Effect callback, extracted: assign the latest props values to refs for later usage\n\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, // actualChildProps: unknown,\nchildPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\n\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, // forceComponentUpdateDispatch: React.Dispatch<any>,\nadditionalSubscribeListener) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}; // Capture values for checking if and when this component unmounts\n\n  let didUnsubscribe = false;\n  let lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n\n\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n\n      additionalSubscribeListener();\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n} // Reducer initial state creation for our update reducer\n\n\nconst initStateUpdates = () => EMPTY_ARRAY;\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\n\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\n\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps) {\n  let {\n    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n    // @ts-ignore\n    pure,\n    areStatesEqual = strictEqual,\n    areOwnPropsEqual = shallowEqual,\n    areStatePropsEqual = shallowEqual,\n    areMergedPropsEqual = shallowEqual,\n    // use React's forwardRef to expose a ref of the wrapped component\n    forwardRef = false,\n    // the context consumer to use\n    context = ReactReduxContext\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined) {\n      throw new Error('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== 'production' && !isValidElementType(WrappedComponent)) {\n      throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = useMemo(() => {\n        // Distinguish between actual \"data\" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        const {\n          reactReduxForwardedRef\n        } = props,\n              wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]);\n      const ContextToUse = useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && // @ts-ignore\n        isContextConsumer( /*#__PURE__*/React.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      const contextValue = useContext(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of ` + `\"${displayName}\". Either wrap the root component in a <Provider>, ` + `or pass a custom React context provider to <Provider> and the corresponding ` + `React context consumer to ${displayName} in connect options.`);\n      } // Based on the previous check, one of these must be true\n\n\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n        const subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]); // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n      const overriddenContextValue = useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n\n        return _extends({}, contextValue, {\n          subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic\n\n      const lastChildProps = useRef();\n      const lastWrapperProps = useRef(wrapperProps);\n      const childPropsFromStoreUpdate = useRef();\n      const renderIsScheduled = useRef(false);\n      const isProcessingDispatch = useRef(false);\n      const isMounted = useRef(false);\n      const latestSubscriptionCallbackError = useRef();\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          } // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n\n      try {\n        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`;\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined;\n        childPropsFromStoreUpdate.current = undefined;\n        lastChildProps.current = actualChildProps;\n      }); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      const renderedWrappedComponent = useMemo(() => {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(WrappedComponent, _extends({}, actualChildProps, {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      const renderedChild = useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    const _Connect = React.memo(ConnectFunction); // Add a hacky cast to get the right output type\n\n\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nexport default connect;","map":{"version":3,"sources":["/home/hp/MICROVERSE/React.js/week3/solo-projects/React-Bookstore/node_modules/react-redux/es/components/connect.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","hoistStatics","React","useContext","useMemo","useRef","isValidElementType","isContextConsumer","defaultSelectorFactory","mapDispatchToPropsFactory","mapStateToPropsFactory","mergePropsFactory","createSubscription","useIsomorphicLayoutEffect","shallowEqual","ReactReduxContext","notInitialized","useSyncExternalStore","initializeConnect","fn","EMPTY_ARRAY","NO_SUBSCRIPTION_ARRAY","stringifyComponent","Comp","JSON","stringify","err","String","useIsomorphicLayoutEffectWithArgs","effectFunc","effectArgs","dependencies","captureWrapperProps","lastWrapperProps","lastChildProps","renderIsScheduled","wrapperProps","childPropsFromStoreUpdate","notifyNestedSubs","current","subscribeUpdates","shouldHandleStateChanges","store","subscription","childPropsSelector","isMounted","additionalSubscribeListener","didUnsubscribe","lastThrownError","checkForUpdates","latestStoreState","getState","newChildProps","error","e","onStateChange","trySubscribe","unsubscribeWrapper","tryUnsubscribe","initStateUpdates","strictEqual","a","b","connect","mapStateToProps","mapDispatchToProps","mergeProps","pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual","forwardRef","context","process","env","NODE_ENV","undefined","Error","Context","initMapStateToProps","initMapDispatchToProps","initMergeProps","Boolean","wrapWithConnect","WrappedComponent","wrappedComponentName","displayName","name","selectorFactoryOptions","ConnectFunction","props","propsContext","reactReduxForwardedRef","ContextToUse","Consumer","createElement","contextValue","didStoreComeFromProps","dispatch","didStoreComeFromContext","getServerState","bind","overriddenContextValue","isProcessingDispatch","latestSubscriptionCallbackError","actualChildPropsSelector","selector","subscribeForReact","subscribe","reactListener","actualChildProps","message","stack","renderedWrappedComponent","ref","renderedChild","Provider","value","_Connect","memo","Connect","_forwarded","forwardConnectRef","forwarded"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,wBAAD,CAAlB;AAEA;;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,UAAtD;AACA,OAAOC,sBAAP,MAAmC,4BAAnC;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,yBAAT,QAA0C,oCAA1C;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,IAAIC,oBAAoB,GAAGD,cAA3B;AACA,OAAO,MAAME,iBAAiB,GAAGC,EAAE,IAAI;AACrCF,EAAAA,oBAAoB,GAAGE,EAAvB;AACD,CAFM,C,CAEJ;;AAEH,MAAMC,WAAW,GAAG,CAAC,IAAD,EAAO,CAAP,CAApB;AACA,MAAMC,qBAAqB,GAAG,CAAC,IAAD,EAAO,IAAP,CAA9B,C,CAA4C;AAC5C;;AAEA,MAAMC,kBAAkB,GAAGC,IAAI,IAAI;AACjC,MAAI;AACF,WAAOC,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAP;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,WAAOC,MAAM,CAACJ,IAAD,CAAb;AACD;AACF,CAND,C,CAQA;AACA;AACA;AACA;;;AACA,SAASK,iCAAT,CAA2CC,UAA3C,EAAuDC,UAAvD,EAAmEC,YAAnE,EAAiF;AAC/ElB,EAAAA,yBAAyB,CAAC,MAAMgB,UAAU,CAAC,GAAGC,UAAJ,CAAjB,EAAkCC,YAAlC,CAAzB;AACD,C,CAAC;;;AAGF,SAASC,mBAAT,CAA6BC,gBAA7B,EAA+CC,cAA/C,EAA+DC,iBAA/D,EAAkFC,YAAlF,EAAgG;AAChGC,yBADA,EAC2BC,gBAD3B,EAC6C;AAC3C;AACAL,EAAAA,gBAAgB,CAACM,OAAjB,GAA2BH,YAA3B;AACAD,EAAAA,iBAAiB,CAACI,OAAlB,GAA4B,KAA5B,CAH2C,CAGR;;AAEnC,MAAIF,yBAAyB,CAACE,OAA9B,EAAuC;AACrCF,IAAAA,yBAAyB,CAACE,OAA1B,GAAoC,IAApC;AACAD,IAAAA,gBAAgB;AACjB;AACF,C,CAAC;AACF;;;AAGA,SAASE,gBAAT,CAA0BC,wBAA1B,EAAoDC,KAApD,EAA2DC,YAA3D,EAAyEC,kBAAzE,EAA6FX,gBAA7F,EAA+GC,cAA/G,EAA+HC,iBAA/H,EAAkJU,SAAlJ,EAA6JR,yBAA7J,EAAwLC,gBAAxL,EAA0M;AAC1MQ,2BADA,EAC6B;AAC3B;AACA,MAAI,CAACL,wBAAL,EAA+B,OAAO,MAAM,CAAE,CAAf,CAFJ,CAEqB;;AAEhD,MAAIM,cAAc,GAAG,KAArB;AACA,MAAIC,eAAe,GAAG,IAAtB,CAL2B,CAKC;;AAE5B,QAAMC,eAAe,GAAG,MAAM;AAC5B,QAAIF,cAAc,IAAI,CAACF,SAAS,CAACN,OAAjC,EAA0C;AACxC;AACA;AACA;AACD,KAL2B,CAK1B;;;AAGF,UAAMW,gBAAgB,GAAGR,KAAK,CAACS,QAAN,EAAzB;AACA,QAAIC,aAAJ,EAAmBC,KAAnB;;AAEA,QAAI;AACF;AACA;AACAD,MAAAA,aAAa,GAAGR,kBAAkB,CAACM,gBAAD,EAAmBjB,gBAAgB,CAACM,OAApC,CAAlC;AACD,KAJD,CAIE,OAAOe,CAAP,EAAU;AACVD,MAAAA,KAAK,GAAGC,CAAR;AACAN,MAAAA,eAAe,GAAGM,CAAlB;AACD;;AAED,QAAI,CAACD,KAAL,EAAY;AACVL,MAAAA,eAAe,GAAG,IAAlB;AACD,KAtB2B,CAsB1B;;;AAGF,QAAII,aAAa,KAAKlB,cAAc,CAACK,OAArC,EAA8C;AAC5C,UAAI,CAACJ,iBAAiB,CAACI,OAAvB,EAAgC;AAC9BD,QAAAA,gBAAgB;AACjB;AACF,KAJD,MAIO;AACL;AACA;AACA;AACA;AACAJ,MAAAA,cAAc,CAACK,OAAf,GAAyBa,aAAzB;AACAf,MAAAA,yBAAyB,CAACE,OAA1B,GAAoCa,aAApC;AACAjB,MAAAA,iBAAiB,CAACI,OAAlB,GAA4B,IAA5B,CAPK,CAO6B;AAClC;;AAEAO,MAAAA,2BAA2B;AAC5B;AACF,GAzCD,CAP2B,CAgDxB;;;AAGHH,EAAAA,YAAY,CAACY,aAAb,GAA6BN,eAA7B;AACAN,EAAAA,YAAY,CAACa,YAAb,GApD2B,CAoDE;AAC7B;;AAEAP,EAAAA,eAAe;;AAEf,QAAMQ,kBAAkB,GAAG,MAAM;AAC/BV,IAAAA,cAAc,GAAG,IAAjB;AACAJ,IAAAA,YAAY,CAACe,cAAb;AACAf,IAAAA,YAAY,CAACY,aAAb,GAA6B,IAA7B;;AAEA,QAAIP,eAAJ,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACA,YAAMA,eAAN;AACD;AACF,GAbD;;AAeA,SAAOS,kBAAP;AACD,C,CAAC;;;AAGF,MAAME,gBAAgB,GAAG,MAAMvC,WAA/B;;AAEA,SAASwC,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,SAAOD,CAAC,KAAKC,CAAb;AACD;AACD;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,eAAjB,EAAkCC,kBAAlC,EAAsDC,UAAtD,EAYQ;AAAA,MAZ0D;AAChE;AACA;AACAC,IAAAA,IAHgE;AAIhEC,IAAAA,cAAc,GAAGR,WAJ+C;AAKhES,IAAAA,gBAAgB,GAAGvD,YAL6C;AAMhEwD,IAAAA,kBAAkB,GAAGxD,YAN2C;AAOhEyD,IAAAA,mBAAmB,GAAGzD,YAP0C;AAQhE;AACA0D,IAAAA,UAAU,GAAG,KATmD;AAUhE;AACAC,IAAAA,OAAO,GAAG1D;AAXsD,GAY1D,uEAAJ,EAAI;;AACN,MAAI2D,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIT,IAAI,KAAKU,SAAb,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,yFAAV,CAAN;AACD;AACF;;AAED,QAAMC,OAAO,GAAGN,OAAhB;AACA,QAAMO,mBAAmB,GAAGtE,sBAAsB,CAACsD,eAAD,CAAlD;AACA,QAAMiB,sBAAsB,GAAGxE,yBAAyB,CAACwD,kBAAD,CAAxD;AACA,QAAMiB,cAAc,GAAGvE,iBAAiB,CAACuD,UAAD,CAAxC;AACA,QAAMzB,wBAAwB,GAAG0C,OAAO,CAACnB,eAAD,CAAxC;;AAEA,QAAMoB,eAAe,GAAGC,gBAAgB,IAAI;AAC1C,QAAIX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACtE,kBAAkB,CAAC+E,gBAAD,CAAhE,EAAoF;AAClF,YAAM,IAAIP,KAAJ,CAAW,mFAAkFxD,kBAAkB,CAAC+D,gBAAD,CAAmB,EAAlI,CAAN;AACD;;AAED,UAAMC,oBAAoB,GAAGD,gBAAgB,CAACE,WAAjB,IAAgCF,gBAAgB,CAACG,IAAjD,IAAyD,WAAtF;AACA,UAAMD,WAAW,GAAI,WAAUD,oBAAqB,GAApD;AACA,UAAMG,sBAAsB,GAAG;AAC7BhD,MAAAA,wBAD6B;AAE7B8C,MAAAA,WAF6B;AAG7BD,MAAAA,oBAH6B;AAI7BD,MAAAA,gBAJ6B;AAK7B;AACAL,MAAAA,mBAN6B;AAO7B;AACAC,MAAAA,sBAR6B;AAS7BC,MAAAA,cAT6B;AAU7Bd,MAAAA,cAV6B;AAW7BE,MAAAA,kBAX6B;AAY7BD,MAAAA,gBAZ6B;AAa7BE,MAAAA;AAb6B,KAA/B;;AAgBA,aAASmB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,YAAM,CAACC,YAAD,EAAeC,sBAAf,EAAuCzD,YAAvC,IAAuDhC,OAAO,CAAC,MAAM;AACzE;AACA;AACA;AACA,cAAM;AACJyF,UAAAA;AADI,YAEFF,KAFJ;AAAA,cAGMvD,YAAY,GAAGrC,6BAA6B,CAAC4F,KAAD,EAAQ3F,SAAR,CAHlD;;AAKA,eAAO,CAAC2F,KAAK,CAAClB,OAAP,EAAgBoB,sBAAhB,EAAwCzD,YAAxC,CAAP;AACD,OAVmE,EAUjE,CAACuD,KAAD,CAViE,CAApE;AAWA,YAAMG,YAAY,GAAG1F,OAAO,CAAC,MAAM;AACjC;AACA;AACA,eAAOwF,YAAY,IAAIA,YAAY,CAACG,QAA7B,IAAyC;AAChDxF,QAAAA,iBAAiB,EAAE,aAAaL,KAAK,CAAC8F,aAAN,CAAoBJ,YAAY,CAACG,QAAjC,EAA2C,IAA3C,CAAf,CADV,GAC6EH,YAD7E,GAC4Fb,OADnG;AAED,OAL2B,EAKzB,CAACa,YAAD,EAAeb,OAAf,CALyB,CAA5B,CAZ8B,CAiBD;;AAE7B,YAAMkB,YAAY,GAAG9F,UAAU,CAAC2F,YAAD,CAA/B,CAnB8B,CAmBiB;AAC/C;AACA;;AAEA,YAAMI,qBAAqB,GAAGf,OAAO,CAACQ,KAAK,CAACjD,KAAP,CAAP,IAAwByC,OAAO,CAACQ,KAAK,CAACjD,KAAN,CAAYS,QAAb,CAA/B,IAAyDgC,OAAO,CAACQ,KAAK,CAACjD,KAAN,CAAYyD,QAAb,CAA9F;AACA,YAAMC,uBAAuB,GAAGjB,OAAO,CAACc,YAAD,CAAP,IAAyBd,OAAO,CAACc,YAAY,CAACvD,KAAd,CAAhE;;AAEA,UAAIgC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACsB,qBAA1C,IAAmE,CAACE,uBAAxE,EAAiG;AAC/F,cAAM,IAAItB,KAAJ,CAAW,2CAAD,GAA+C,IAAGS,WAAY,qDAA9D,GAAsH,8EAAtH,GAAuM,6BAA4BA,WAAY,sBAAzP,CAAN;AACD,OA5B6B,CA4B5B;;;AAGF,YAAM7C,KAAK,GAAGwD,qBAAqB,GAAGP,KAAK,CAACjD,KAAT,GAAiBuD,YAAY,CAACvD,KAAjE;AACA,YAAM2D,cAAc,GAAGD,uBAAuB,GAAGH,YAAY,CAACI,cAAhB,GAAiC3D,KAAK,CAACS,QAArF;AACA,YAAMP,kBAAkB,GAAGxC,OAAO,CAAC,MAAM;AACvC;AACA;AACA,eAAOI,sBAAsB,CAACkC,KAAK,CAACyD,QAAP,EAAiBV,sBAAjB,CAA7B;AACD,OAJiC,EAI/B,CAAC/C,KAAD,CAJ+B,CAAlC;AAKA,YAAM,CAACC,YAAD,EAAeL,gBAAf,IAAmClC,OAAO,CAAC,MAAM;AACrD,YAAI,CAACqC,wBAAL,EAA+B,OAAOpB,qBAAP,CADsB,CACQ;AAC7D;;AAEA,cAAMsB,YAAY,GAAG/B,kBAAkB,CAAC8B,KAAD,EAAQwD,qBAAqB,GAAGrB,SAAH,GAAeoB,YAAY,CAACtD,YAAzD,CAAvC,CAJqD,CAI0D;AAC/G;AACA;AACA;;AAEA,cAAML,gBAAgB,GAAGK,YAAY,CAACL,gBAAb,CAA8BgE,IAA9B,CAAmC3D,YAAnC,CAAzB;AACA,eAAO,CAACA,YAAD,EAAeL,gBAAf,CAAP;AACD,OAX+C,EAW7C,CAACI,KAAD,EAAQwD,qBAAR,EAA+BD,YAA/B,CAX6C,CAAhD,CAtC8B,CAiDoB;AAClD;;AAEA,YAAMM,sBAAsB,GAAGnG,OAAO,CAAC,MAAM;AAC3C,YAAI8F,qBAAJ,EAA2B;AACzB;AACA;AACA;AACA,iBAAOD,YAAP;AACD,SAN0C,CAMzC;AACF;;;AAGA,eAAOnG,QAAQ,CAAC,EAAD,EAAKmG,YAAL,EAAmB;AAChCtD,UAAAA;AADgC,SAAnB,CAAf;AAGD,OAbqC,EAanC,CAACuD,qBAAD,EAAwBD,YAAxB,EAAsCtD,YAAtC,CAbmC,CAAtC,CApD8B,CAiE2B;;AAEzD,YAAMT,cAAc,GAAG7B,MAAM,EAA7B;AACA,YAAM4B,gBAAgB,GAAG5B,MAAM,CAAC+B,YAAD,CAA/B;AACA,YAAMC,yBAAyB,GAAGhC,MAAM,EAAxC;AACA,YAAM8B,iBAAiB,GAAG9B,MAAM,CAAC,KAAD,CAAhC;AACA,YAAMmG,oBAAoB,GAAGnG,MAAM,CAAC,KAAD,CAAnC;AACA,YAAMwC,SAAS,GAAGxC,MAAM,CAAC,KAAD,CAAxB;AACA,YAAMoG,+BAA+B,GAAGpG,MAAM,EAA9C;AACAQ,MAAAA,yBAAyB,CAAC,MAAM;AAC9BgC,QAAAA,SAAS,CAACN,OAAV,GAAoB,IAApB;AACA,eAAO,MAAM;AACXM,UAAAA,SAAS,CAACN,OAAV,GAAoB,KAApB;AACD,SAFD;AAGD,OALwB,EAKtB,EALsB,CAAzB;AAMA,YAAMmE,wBAAwB,GAAGtG,OAAO,CAAC,MAAM;AAC7C,cAAMuG,QAAQ,GAAG,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAItE,yBAAyB,CAACE,OAA1B,IAAqCH,YAAY,KAAKH,gBAAgB,CAACM,OAA3E,EAAoF;AAClF,mBAAOF,yBAAyB,CAACE,OAAjC;AACD,WAToB,CASnB;AACF;AACA;AACA;;;AAGA,iBAAOK,kBAAkB,CAACF,KAAK,CAACS,QAAN,EAAD,EAAmBf,YAAnB,CAAzB;AACD,SAhBD;;AAkBA,eAAOuE,QAAP;AACD,OApBuC,EAoBrC,CAACjE,KAAD,EAAQN,YAAR,CApBqC,CAAxC,CAhF8B,CAoGH;AAC3B;AACA;;AAEA,YAAMwE,iBAAiB,GAAGxG,OAAO,CAAC,MAAM;AACtC,cAAMyG,SAAS,GAAGC,aAAa,IAAI;AACjC,cAAI,CAACnE,YAAL,EAAmB;AACjB,mBAAO,MAAM,CAAE,CAAf;AACD;;AAED,iBAAOH,gBAAgB,CAACC,wBAAD,EAA2BC,KAA3B,EAAkCC,YAAlC,EAAgD;AACvEC,UAAAA,kBADuB,EACHX,gBADG,EACeC,cADf,EAC+BC,iBAD/B,EACkDU,SADlD,EAC6DR,yBAD7D,EACwFC,gBADxF,EAC0GwE,aAD1G,CAAvB;AAED,SAPD;;AASA,eAAOD,SAAP;AACD,OAXgC,EAW9B,CAAClE,YAAD,CAX8B,CAAjC;AAYAf,MAAAA,iCAAiC,CAACI,mBAAD,EAAsB,CAACC,gBAAD,EAAmBC,cAAnB,EAAmCC,iBAAnC,EAAsDC,YAAtD,EAAoEC,yBAApE,EAA+FC,gBAA/F,CAAtB,CAAjC;AACA,UAAIyE,gBAAJ;;AAEA,UAAI;AACFA,QAAAA,gBAAgB,GAAG9F,oBAAoB,EAAE;AACzC2F,QAAAA,iBADuC,EACpB;AACnB;AACAF,QAAAA,wBAHuC,EAGbL,cAAc,GAAG,MAAMzD,kBAAkB,CAACyD,cAAc,EAAf,EAAmBjE,YAAnB,CAA3B,GAA8DsE,wBAH/D,CAAvC;AAID,OALD,CAKE,OAAOhF,GAAP,EAAY;AACZ,YAAI+E,+BAA+B,CAAClE,OAApC,EAA6C;AAC3C;AACAb,UAAAA,GAAG,CAACsF,OAAJ,IAAgB,4DAA2DP,+BAA+B,CAAClE,OAAhC,CAAwC0E,KAAM,MAAzH;AACD;;AAED,cAAMvF,GAAN;AACD;;AAEDb,MAAAA,yBAAyB,CAAC,MAAM;AAC9B4F,QAAAA,+BAA+B,CAAClE,OAAhC,GAA0CsC,SAA1C;AACAxC,QAAAA,yBAAyB,CAACE,OAA1B,GAAoCsC,SAApC;AACA3C,QAAAA,cAAc,CAACK,OAAf,GAAyBwE,gBAAzB;AACD,OAJwB,CAAzB,CArI8B,CAyI1B;AACJ;;AAEA,YAAMG,wBAAwB,GAAG9G,OAAO,CAAC,MAAM;AAC7C;AACE;AACA;AACAF,UAAAA,KAAK,CAAC8F,aAAN,CAAoBX,gBAApB,EAAsCvF,QAAQ,CAAC,EAAD,EAAKiH,gBAAL,EAAuB;AACnEI,YAAAA,GAAG,EAAEtB;AAD8D,WAAvB,CAA9C;AAHF;AAOD,OARuC,EAQrC,CAACA,sBAAD,EAAyBR,gBAAzB,EAA2C0B,gBAA3C,CARqC,CAAxC,CA5I8B,CAoJoC;AAClE;;AAEA,YAAMK,aAAa,GAAGhH,OAAO,CAAC,MAAM;AAClC,YAAIqC,wBAAJ,EAA8B;AAC5B;AACA;AACA;AACA,iBAAO,aAAavC,KAAK,CAAC8F,aAAN,CAAoBF,YAAY,CAACuB,QAAjC,EAA2C;AAC7DC,YAAAA,KAAK,EAAEf;AADsD,WAA3C,EAEjBW,wBAFiB,CAApB;AAGD;;AAED,eAAOA,wBAAP;AACD,OAX4B,EAW1B,CAACpB,YAAD,EAAeoB,wBAAf,EAAyCX,sBAAzC,CAX0B,CAA7B;AAYA,aAAOa,aAAP;AACD;;AAED,UAAMG,QAAQ,GAAGrH,KAAK,CAACsH,IAAN,CAAW9B,eAAX,CAAjB,CA7L0C,CA+L1C;;;AACA,UAAM+B,OAAO,GAAGF,QAAhB;AACAE,IAAAA,OAAO,CAACpC,gBAAR,GAA2BA,gBAA3B;AACAoC,IAAAA,OAAO,CAAClC,WAAR,GAAsBG,eAAe,CAACH,WAAhB,GAA8BA,WAApD;;AAEA,QAAIf,UAAJ,EAAgB;AACd,YAAMkD,UAAU,GAAGxH,KAAK,CAACsE,UAAN,CAAiB,SAASmD,iBAAT,CAA2BhC,KAA3B,EAAkCwB,GAAlC,EAAuC;AACzE;AACA,eAAO,aAAajH,KAAK,CAAC8F,aAAN,CAAoByB,OAApB,EAA6B3H,QAAQ,CAAC,EAAD,EAAK6F,KAAL,EAAY;AACnEE,UAAAA,sBAAsB,EAAEsB;AAD2C,SAAZ,CAArC,CAApB;AAGD,OALkB,CAAnB;;AAOA,YAAMS,SAAS,GAAGF,UAAlB;AACAE,MAAAA,SAAS,CAACrC,WAAV,GAAwBA,WAAxB;AACAqC,MAAAA,SAAS,CAACvC,gBAAV,GAA6BA,gBAA7B;AACA,aAAOpF,YAAY,CAAC2H,SAAD,EAAYvC,gBAAZ,CAAnB;AACD;;AAED,WAAOpF,YAAY,CAACwH,OAAD,EAAUpC,gBAAV,CAAnB;AACD,GAnND;;AAqNA,SAAOD,eAAP;AACD;;AAED,eAAerB,OAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"reactReduxForwardedRef\"];\n\n/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport hoistStatics from 'hoist-non-react-statics';\nimport React, { useContext, useMemo, useRef } from 'react';\nimport { isValidElementType, isContextConsumer } from 'react-is';\nimport defaultSelectorFactory from '../connect/selectorFactory';\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps';\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps';\nimport { mergePropsFactory } from '../connect/mergeProps';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport shallowEqual from '../utils/shallowEqual';\nimport { ReactReduxContext } from './Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStore = notInitialized;\nexport const initializeConnect = fn => {\n  useSyncExternalStore = fn;\n}; // Define some constant arrays just to avoid re-creating these\n\nconst EMPTY_ARRAY = [null, 0];\nconst NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\n\nconst stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n} // Effect callback, extracted: assign the latest props values to refs for later usage\n\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, // actualChildProps: unknown,\nchildPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\n\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, // forceComponentUpdateDispatch: React.Dispatch<any>,\nadditionalSubscribeListener) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}; // Capture values for checking if and when this component unmounts\n\n  let didUnsubscribe = false;\n  let lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n\n\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n\n      additionalSubscribeListener();\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n} // Reducer initial state creation for our update reducer\n\n\nconst initStateUpdates = () => EMPTY_ARRAY;\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\n\n\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps, {\n  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n  // @ts-ignore\n  pure,\n  areStatesEqual = strictEqual,\n  areOwnPropsEqual = shallowEqual,\n  areStatePropsEqual = shallowEqual,\n  areMergedPropsEqual = shallowEqual,\n  // use React's forwardRef to expose a ref of the wrapped component\n  forwardRef = false,\n  // the context consumer to use\n  context = ReactReduxContext\n} = {}) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined) {\n      throw new Error('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== 'production' && !isValidElementType(WrappedComponent)) {\n      throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = useMemo(() => {\n        // Distinguish between actual \"data\" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        const {\n          reactReduxForwardedRef\n        } = props,\n              wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]);\n      const ContextToUse = useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && // @ts-ignore\n        isContextConsumer( /*#__PURE__*/React.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      const contextValue = useContext(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of ` + `\"${displayName}\". Either wrap the root component in a <Provider>, ` + `or pass a custom React context provider to <Provider> and the corresponding ` + `React context consumer to ${displayName} in connect options.`);\n      } // Based on the previous check, one of these must be true\n\n\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n        const subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]); // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n      const overriddenContextValue = useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n\n        return _extends({}, contextValue, {\n          subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic\n\n      const lastChildProps = useRef();\n      const lastWrapperProps = useRef(wrapperProps);\n      const childPropsFromStoreUpdate = useRef();\n      const renderIsScheduled = useRef(false);\n      const isProcessingDispatch = useRef(false);\n      const isMounted = useRef(false);\n      const latestSubscriptionCallbackError = useRef();\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          } // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n\n      try {\n        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`;\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined;\n        childPropsFromStoreUpdate.current = undefined;\n        lastChildProps.current = actualChildProps;\n      }); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      const renderedWrappedComponent = useMemo(() => {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(WrappedComponent, _extends({}, actualChildProps, {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      const renderedChild = useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    const _Connect = React.memo(ConnectFunction);\n\n    // Add a hacky cast to get the right output type\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nexport default connect;"]},"metadata":{},"sourceType":"module"}